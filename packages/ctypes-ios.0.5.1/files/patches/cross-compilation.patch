From 1b608b7a42448299cd92db0eb3fe70b8df182eda Mon Sep 17 00:00:00 2001
From: whitequark <whitequark@whitequark.org>
Date: Mon, 2 May 2016 21:42:59 +0000
Subject: Add first-class support for cross-compiling.

Specifically, do not try to run any freshly compiled binaries.
Instead, let compiler run the expansions and calculations whose
result we need, put it into .rodata surrounded by markers, and
then extract that.

diff --git a/.gitignore b/.gitignore
index 7c25794..d9b2615 100644
--- a/.gitignore
+++ b/.gitignore
@@ -2,6 +2,8 @@ _build
 libffi.config
 asneeded.config
 discover
+gen_c_primitives
+gen_libffi_abi
 src/ctypes/ctypes_primitives.ml
 src/ctypes_config.h
 src/ctypes_config.ml
@@ -9,6 +11,9 @@ src/ctypes-foreign-base/dl_stubs.c
 src/ctypes-foreign-base/dl.ml
 src/discover/commands.cm*
 src/discover/discover.cm*
+src/configure/extract_from_c.cm*
+src/configure/gen_c_primitives.cm*
+src/configure/gen_libffi_abi.cm*
 *~
 generated_stubs.c
 generated_bindings.ml
diff --git a/Makefile b/Makefile
index 508f2a3..ecb0de9 100644
--- a/Makefile
+++ b/Makefile
@@ -4,6 +4,7 @@ DEBUG=false
 COVERAGE=false
 OCAML=ocaml
 OCAMLFIND=ocamlfind
+HOSTOCAMLFIND=$(OCAMLFIND)
 OCAMLDEP=$(OCAMLFIND) ocamldep
 OCAMLMKLIB=$(OCAMLFIND) ocamlmklib
 VPATH=src examples
@@ -121,19 +122,6 @@ ctypes-top.install_native_objects = yes
 ctypes-top: PROJECT=ctypes-top
 ctypes-top: $$(LIB_TARGETS)

-# configure subproject
-configure.dir = src/configure
-
-configure: PROJECT=configure
-configure: $$(NATIVE_TARGET)
-
-# libffi-abigen subproject
-libffi-abigen.dir = src/libffi-abigen
-libffi-abigen.install = no
-libffi-abigen.deps = unix
-libffi-abigen: PROJECT=libffi-abigen
-libffi-abigen: $$(NATIVE_TARGET)
-
 # configuration
 configured: src/ctypes/ctypes_primitives.ml src/ctypes-foreign-base/libffi_abi.ml src/ctypes-foreign-base/dl.ml src/ctypes-foreign-base/dl_stubs.c

@@ -142,14 +130,16 @@ src/ctypes-foreign-base/dl.ml: src/ctypes-foreign-base/dl.ml$(OS_ALT_SUFFIX)
 src/ctypes-foreign-base/dl_stubs.c: src/ctypes-foreign-base/dl_stubs.c$(OS_ALT_SUFFIX)
	cp $< $@

-src/ctypes/ctypes_primitives.ml: $(BUILDDIR)/configure.native
-	$< > $@
+src/ctypes/ctypes_primitives.ml: src/configure/extract_from_c.ml src/configure/gen_c_primitives.ml
+	$(HOSTOCAMLFIND) ocamlc -o gen_c_primitives -package bytes -linkpkg $^ -I src/configure
+	./gen_c_primitives > $@ || (rm $@ && false)

-src/ctypes-foreign-base/libffi_abi.ml: $(BUILDDIR)/libffi-abigen.native
-	$< > $@
+src/ctypes-foreign-base/libffi_abi.ml: src/configure/extract_from_c.ml src/configure/gen_libffi_abi.ml
+	$(HOSTOCAMLFIND) ocamlc -o gen_libffi_abi -package bytes -linkpkg $^ -I src/configure
+	./gen_libffi_abi > $@ || (rm $@ && false)

 libffi.config: src/discover/commands.mli src/discover/commands.ml src/discover/discover.ml
-	@ocamlfind ocamlc -o discover -package str,bytes -linkpkg $^ -I src/discover
+	$(HOSTOCAMLFIND) ocamlc -o discover -package str,bytes -linkpkg $^ -I src/discover
	./discover -ocamlc "$(OCAMLFIND) ocamlc" > $@ || (rm $@ && false)

 asneeded.config:
diff --git a/src/configure/extract_from_c.ml b/src/configure/extract_from_c.ml
new file mode 100644
index 0000000..8f7f531
--- /dev/null
+++ b/src/configure/extract_from_c.ml
@@ -0,0 +1,118 @@
+(*
+ * Copyright (c) 2016 whitequark.
+ *
+ * This file is distributed under the terms of the MIT License.
+ * See the file LICENSE for details.
+ *)
+
+let getenv ~default name =
+  try Sys.getenv name
+  with Not_found -> default
+
+let nsplit sep str =
+  if str = "" then []
+  else
+    let rec loop acc pos =
+      if pos > String.length str then
+        List.rev acc
+      else
+        let i = try String.index_from str pos sep with Not_found -> String.length str in
+        loop (String.sub str pos (i - pos) :: acc) (i + 1)
+    in
+    loop [] 0
+
+let read_output program =
+  let input_filename = Filename.temp_file "ctypes_libffi_config" ".c" in
+  let channel = open_out input_filename in
+  output_string channel program;
+  close_out channel;
+  let output_filename = (Filename.chop_suffix input_filename ".c") ^ ".o" in
+  let cwd = Sys.getcwd () in
+  let cmd =
+    Printf.sprintf "%s ocamlc -verbose %s %s -c 1>&2"
+      (getenv ~default:"ocamlfind" "OCAMLFIND")
+      ((getenv ~default:"" "CFLAGS") |>
+       (nsplit ' ') |>
+       (List.map (fun s -> "-ccopt '"^s^"'")) |>
+       (String.concat " "))
+      input_filename
+  in
+  prerr_endline cmd;
+  Sys.chdir (Filename.dirname input_filename);
+  ignore (Sys.command cmd);
+  Sys.chdir cwd;
+  Sys.remove input_filename;
+  if not (Sys.file_exists output_filename) then
+    raise Not_found;
+  let channel = open_in_bin output_filename in
+  let length = in_channel_length channel in
+  let result = Bytes.create length in
+  really_input channel result 0 length;
+  close_in channel;
+  Sys.remove output_filename;
+  result
+
+let find_from haystack pos needle =
+  let needle_length = Bytes.length needle in
+  let rec loop pos =
+    let pos = Bytes.index_from haystack pos needle.[0] in
+    if needle = Bytes.sub haystack pos needle_length then
+      pos
+    else
+      loop (pos + 1)
+  in loop 0
+
+let prefix = Bytes.of_string "BEGIN-"
+let suffix = Bytes.of_string "-END"
+let extract bytes =
+  let begin_pos = find_from bytes 0 prefix + Bytes.length prefix in
+  let end_pos   = find_from bytes 0 suffix in
+  Bytes.to_string (Bytes.sub bytes begin_pos (end_pos - begin_pos))
+
+let headers = "\
+#include <stdint.h>
+#include <stdbool.h>
+#include <complex.h>
+#include <inttypes.h>
+#include <caml/mlvalues.h>
+#include <ffi.h>
+"
+
+let integer expression =
+  let code = Printf.sprintf "%s
+
+#define alignof(T) (offsetof(struct { char c; T t; }, t))
+
+#define D0(x) ('0'+(x/1         )%%10)
+#define D1(x) ('0'+(x/10        )%%10), D0(x)
+#define D2(x) ('0'+(x/100       )%%10), D1(x)
+#define D3(x) ('0'+(x/1000      )%%10), D2(x)
+#define D4(x) ('0'+(x/10000     )%%10), D3(x)
+#define D5(x) ('0'+(x/100000    )%%10), D4(x)
+#define D6(x) ('0'+(x/1000000   )%%10), D5(x)
+#define D7(x) ('0'+(x/10000000  )%%10), D6(x)
+#define D8(x) ('0'+(x/100000000 )%%10), D7(x)
+#define D9(x) ('0'+(x/1000000000)%%10), D8(x)
+const char s[] = {
+  'B', 'E', 'G', 'I', 'N', '-',
+  D9((%s)),
+  '-', 'E', 'N', 'D'
+};
+" headers expression in
+  int_of_string (extract (read_output code))
+
+let string expression =
+  let code = Printf.sprintf "%s
+
+#define STRINGIFY1(x) #x
+#define STRINGIFY(x) STRINGIFY1(x)
+
+#if __USE_MINGW_ANSI_STDIO && defined(__MINGW64__)
+#define REAL_ARCH_INTNAT_PRINTF_FORMAT \"ll\"
+#else
+#define REAL_ARCH_INTNAT_PRINTF_FORMAT ARCH_INTNAT_PRINTF_FORMAT
+#endif
+
+const char *s = \"BEGIN-\" %s \"-END\";
+" headers expression in
+  extract (read_output code)
diff --git a/src/configure/gen_c_primitives.ml b/src/configure/gen_c_primitives.ml
new file mode 100644
index 0000000..5ce5db0
--- /dev/null
+++ b/src/configure/gen_c_primitives.ml
@@ -0,0 +1,96 @@
+let header ="\
+(*
+ * Copyright (c) 2016 whitequark
+ *
+ * This file is distributed under the terms of the MIT License.
+ * See the file LICENSE for details.
+ *)
+
+open Ctypes_primitive_types
+"
+
+type c_format =
+| No_format
+| Known_format of string
+| Defined_format of string
+
+type c_primitive = {
+  constructor : string;
+  typ         : string;
+  format      : c_format;
+  size        : string;
+  alignment   : string;
+}
+
+let c_primitive constructor typ format =
+  { constructor; typ; format;
+    size = "sizeof("^typ^")";
+    alignment = "alignof("^typ^")"; }
+
+let c_primitives = [
+  c_primitive "Char"      "char"               (Known_format "d");
+  c_primitive "Schar"     "signed char"        (Known_format "d");
+  c_primitive "Uchar"     "unsigned char"      (Known_format "d");
+  c_primitive "Bool"      "bool"               (Known_format "d");
+  c_primitive "Short"     "short"              (Known_format "hd");
+  c_primitive "Int"       "int"                (Known_format "d");
+  c_primitive "Long"      "long"               (Known_format "ld");
+  c_primitive "Llong"     "long long"          (Known_format "lld");
+  c_primitive "Ushort"    "unsigned short"     (Known_format "hu");
+  c_primitive "Uint"      "unsigned int"       (Known_format "u");
+  c_primitive "Ulong"     "unsigned long"      (Known_format "lu");
+  c_primitive "Ullong"    "unsigned long long" (Known_format "llu");
+  c_primitive "Size_t"    "size_t"             (Known_format "zu");
+  c_primitive "Int8_t"    "int8_t"             (Defined_format "PRId8");
+  c_primitive "Int16_t"   "int16_t"            (Defined_format "PRId16");
+  c_primitive "Int32_t"   "int32_t"            (Defined_format "PRId32");
+  c_primitive "Int64_t"   "int64_t"            (Defined_format "PRId64");
+  c_primitive "Uint8_t"   "uint8_t"            (Defined_format "PRIu8");
+  c_primitive "Uint16_t"  "uint16_t"           (Defined_format "PRIu16");
+  c_primitive "Uint32_t"  "uint32_t"           (Defined_format "PRIu32");
+  c_primitive "Uint64_t"  "uint64_t"           (Defined_format "PRIu64");
+  c_primitive "Float"     "float"              (Known_format ".12g");
+  c_primitive "Double"    "double"             (Known_format ".12g");
+  c_primitive "Complex32" "float complex"      (No_format);
+  c_primitive "Complex64" "double complex"     (No_format);
+  c_primitive "Nativeint" "intnat"             (Defined_format "REAL_ARCH_INTNAT_PRINTF_FORMAT \"d\"");
+  { constructor = "Camlint";
+    typ         = "camlint";
+    format      = Defined_format "REAL_ARCH_INTNAT_PRINTF_FORMAT \"d\"";
+    size        = "sizeof(intnat)";
+    alignment   = "alignof(intnat)" };
+]
+
+let printf = Printf.printf
+
+let generate name typ f =
+  printf "let %s : type a. a prim -> %s = function\n" name typ;
+  List.iter (fun c_primitive ->
+    printf " | %s -> " c_primitive.constructor;
+    begin try
+      f c_primitive
+    with Not_found ->
+      failwith (name^": "^c_primitive.constructor)
+    end;
+    printf "\n") c_primitives
+
+let () =
+  begin
+    print_string header;
+    generate "sizeof" "int" (fun { size } ->
+      printf "%d" (Extract_from_c.integer size));
+    generate "alignment" "int" (fun { alignment } ->
+      printf "%d" (Extract_from_c.integer alignment));
+    generate "name" "string" (fun { typ } ->
+      printf "%S" (Extract_from_c.string ("STRINGIFY("^typ^")")));
+    generate "format_string" "string option" (fun { format } ->
+      match format with
+      | Known_format str ->
+        printf "Some %S" ("%"^str)
+      | Defined_format str ->
+        printf "Some %S" ("%"^Extract_from_c.string str)
+      | No_format ->
+        printf "None");
+    printf "let pointer_size = %d\n" (Extract_from_c.integer "sizeof(void*)");
+    printf "let pointer_alignment = %d\n" (Extract_from_c.integer "alignof(void*)");
+  end
diff --git a/src/configure/gen_libffi_abi.ml b/src/configure/gen_libffi_abi.ml
new file mode 100644
index 0000000..d69b79d
--- /dev/null
+++ b/src/configure/gen_libffi_abi.ml
@@ -0,0 +1,67 @@
+(*
+ * Copyright (c) 2014 Jeremy Yallop.
+ *
+ * This file is distributed under the terms of the MIT License.
+ * See the file LICENSE for details.
+ *)
+
+let header ="\
+(*
+ * Copyright (c) 2014 Jeremy Yallop.
+ *
+ * This file is distributed under the terms of the MIT License.
+ * See the file LICENSE for details.
+ *)
+
+(* Support for various ABIs *)
+
+type abi = Code of int | Unsupported of string
+
+let abi_code = function
+   Code c -> c
+ | Unsupported sym -> raise (Ctypes.Unsupported sym)
+
+"
+
+let symbols = [
+  ("aix"              , "FFI_AIX");
+  ("darwin"           , "FFI_DARWIN");
+  ("eabi"             , "FFI_EABI");
+  ("fastcall"         , "FFI_FASTCALL");
+  ("gcc_sysv"         , "FFI_GCC_SYSV");
+  ("linux"            , "FFI_LINUX");
+  ("linux64"          , "FFI_LINUX64");
+  ("linux_soft_float" , "FFI_LINUX_SOFT_FLOAT");
+  ("ms_cdecl"         , "FFI_MS_CDECL");
+  ("n32"              , "FFI_N32");
+  ("n32_soft_float"   , "FFI_N32_SOFT_FLOAT");
+  ("n64"              , "FFI_N64");
+  ("n64_soft_float"   , "FFI_N64_SOFT_FLOAT");
+  ("o32"              , "FFI_O32");
+  ("o32_soft_float"   , "FFI_O32_SOFT_FLOAT");
+  ("osf"              , "FFI_OSF");
+  ("pa32"             , "FFI_PA32");
+  ("stdcall"          , "FFI_STDCALL");
+  ("sysv"             , "FFI_SYSV");
+  ("thiscall"         , "FFI_THISCALL");
+  ("unix"             , "FFI_UNIX");
+  ("unix64"           , "FFI_UNIX64");
+  ("v8"               , "FFI_V8");
+  ("v8plus"           , "FFI_V8PLUS");
+  ("v9"               , "FFI_V9");
+  ("vfp"              , "FFI_VFP");
+  ("default_abi"      , "FFI_DEFAULT_ABI");
+]
+
+let write_line name symbol =
+  try
+    Printf.printf "let %s = Code %d\n" name (Extract_from_c.integer symbol)
+  with Not_found ->
+    Printf.printf "let %s = Unsupported \"%s\"\n" name symbol
+
+let () =
+  begin
+    print_string header;
+    List.iter (fun (name, symbol) -> write_line name symbol) symbols
+  end
+
diff --git a/src/configure/make_primitive_details.ml b/src/configure/make_primitive_details.ml
deleted file mode 100644
index ca5642c..0000000
--- a/src/configure/make_primitive_details.ml
+++ /dev/null
@@ -1,3 +0,0 @@
-external make_primitives : unit -> unit = "ctypes_make_primitives"
-
-let () = make_primitives ()
diff --git a/src/configure/make_primitive_details_stubs.c b/src/configure/make_primitive_details_stubs.c
deleted file mode 100644
index d4a1d10..0000000
--- a/src/configure/make_primitive_details_stubs.c
+++ /dev/null
@@ -1,116 +0,0 @@
-/*
- * Copyright (c) 2013 Jeremy Yallop.
- *
- * This file is distributed under the terms of the MIT License.
- * See the file LICENSE for details.
- */
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <stddef.h>
-#include <inttypes.h>
-#include <errno.h>
-#include <stdint.h>
-#include <complex.h>
-#include <stdbool.h>
-
-#include <caml/mlvalues.h>
-
-#if __USE_MINGW_ANSI_STDIO && defined(__MINGW64__)
-#define REAL_ARCH_INTNAT_PRINTF_FORMAT "ll"
-#else
-#define REAL_ARCH_INTNAT_PRINTF_FORMAT ARCH_INTNAT_PRINTF_FORMAT
-#endif
-
-#define ALIGNMENT(T) (offsetof(struct { char c; T t; }, t))
-#define FULL_ENTRY(CTOR, T, FORMAT, SIZE, ALIGNMENT) \
-  { #CTOR, #T, FORMAT, SIZE, ALIGNMENT }
-#define ENTRY(CTOR, T, FORMAT) \
-  FULL_ENTRY(CTOR, T, FORMAT, sizeof(T), ALIGNMENT(T))
-
-static struct details {
-  const char *constructor;
-  const char *name;
-  const char *format_string;
-  int size, alignment;
-} details[] = {
-  ENTRY(Char, char, "%d"),
-  ENTRY(Schar, signed char, "%d"),
-  ENTRY(Uchar, unsigned char, "%d"),
-  ENTRY(Bool, bool, "%d"),
-  ENTRY(Short, short, "%hd"),
-  ENTRY(Int, int, "%d"),
-  ENTRY(Long, long, "%ld"),
-  ENTRY(Llong, long long, "%lld"),
-  ENTRY(Ushort, unsigned short, "%hu"),
-  ENTRY(Uint, unsigned int, "%u"),
-  ENTRY(Ulong, unsigned long, "%lu"),
-  ENTRY(Ullong, unsigned long long, "%llu"),
-  ENTRY(Size_t, size_t, "%zu"),
-  ENTRY(Int8_t, int8_t, "%" PRId8),
-  ENTRY(Int16_t, int16_t, "%" PRId16),
-  ENTRY(Int32_t, int32_t, "%" PRId32),
-  ENTRY(Int64_t, int64_t, "%" PRId64),
-  ENTRY(Uint8_t, uint8_t, "%" PRIu8),
-  ENTRY(Uint16_t, uint16_t, "%" PRIu16),
-  ENTRY(Uint32_t, uint32_t, "%" PRIu32),
-  ENTRY(Uint64_t, uint64_t, "%" PRIu64),
-  FULL_ENTRY(Camlint, camlint,
-             "%" REAL_ARCH_INTNAT_PRINTF_FORMAT "d",
-             sizeof(intnat), ALIGNMENT(intnat)),
-  ENTRY(Nativeint, intnat, "%" REAL_ARCH_INTNAT_PRINTF_FORMAT "d"),
-  ENTRY(Float, float, "%.12g"),
-  ENTRY(Double, double, "%.12g"),
-  ENTRY(Complex32, float complex, NULL),
-  ENTRY(Complex64, double complex, NULL),
-};
-
-void generate_function(char *name, char *type,
-                       void (*cse)(struct details*))
-{
-  unsigned i;
-  printf("let %s : type a. a prim -> %s = function\n", name, type);
-  for (i = 0; i < sizeof details / sizeof *details; i++) {
-    printf(" | %s -> ", details[i].constructor);
-    cse(&details[i]);
-    printf("\n");
-  }
-}
-
-void print_size(struct details *d)
-{
-  printf("%d", d->size);
-}
-
-void print_alignment(struct details *d)
-{
-  printf("%d", d->alignment);
-}
-
-void print_name(struct details *d)
-{
-  printf("\"%s\"", d->name);
-}
-
-void print_format_string(struct details *d)
-{
-  if (d->format_string != NULL) {
-    printf("Some \"%s\"", d->format_string);
-  }
-  else {
-    printf("None");
-  }
-}
-
-value ctypes_make_primitives(value _unit)
-{
-  printf("open Ctypes_primitive_types\n");
-  generate_function("sizeof", "int", print_size);
-  generate_function("alignment", "int", print_alignment);
-  generate_function("name", "string", print_name);
-  generate_function("format_string", "string option", print_format_string);
-  printf("let pointer_size = %d\n", (int)sizeof(void *));
-  printf("let pointer_alignment = %d\n", (int)ALIGNMENT(void *));
-  fflush(stdout);
-  return Val_unit;
-}
